#pragma once
// Generated by codegen/vm_copypaste_impl.py

#include "g_process.h"
#include "bif/g_bif_misc.h"

namespace gluon {
namespace impl {

#define IMMED(var) if ((var).is_immed()) { proc->vm_resolve_immed(var); }

//  inline void opcode_label(Process *proc, word_t *&ip) { // opcode: 1
//  }
//  inline void opcode_func_info(Process *proc, word_t *&ip) { // opcode: 2
//  }
//  inline void opcode_int_code_end(Process *proc, word_t *&ip) { // opcode: 3
//  }
//  inline void opcode_call(Process *proc, word_t *&ip) { // opcode: 4
//  }
//  inline void opcode_call_last(Process *proc, word_t *&ip) { // opcode: 5
//  }
  inline void opcode_call_only(Process *proc, word_t *&ip) { // opcode: 6
    //Term arg1 = ip[0];
    Term arg2 = ip[1];

    G_ASSERT(arg2.is_small());
    word_t offset = (word_t)arg2.small_get_value();
    ip = proc->get_code_base() + offset;
  }
//  inline void opcode_call_ext(Process *proc, word_t *&ip) { // opcode: 7
//  }
//  inline void opcode_call_ext_last(Process *proc, word_t *&ip) { // opcode: 8
//  }
//  inline void opcode_bif0(Process *proc, word_t *&ip) { // opcode: 9
//  }
//  inline void opcode_bif1(Process *proc, word_t *&ip) { // opcode: 10
//  }
//  inline void opcode_bif2(Process *proc, word_t *&ip) { // opcode: 11
//  }
//  inline void opcode_allocate(Process *proc, word_t *&ip) { // opcode: 12
//  }
//  inline void opcode_allocate_heap(Process *proc, word_t *&ip) { // opcode: 13
//  }
//  inline void opcode_allocate_zero(Process *proc, word_t *&ip) { // opcode: 14
//  }
//  inline void opcode_allocate_heap_zero(Process *proc, word_t *&ip) { // opcode: 15
//  }
//  inline void opcode_test_heap(Process *proc, word_t *&ip) { // opcode: 16
//  }
//  inline void opcode_init(Process *proc, word_t *&ip) { // opcode: 17
//  }
//  inline void opcode_deallocate(Process *proc, word_t *&ip) { // opcode: 18
//  }
//  inline void opcode_return(Process *proc, word_t *&ip) { // opcode: 19
//  }
//  inline void opcode_send(Process *proc, word_t *&ip) { // opcode: 20
//  }
//  inline void opcode_remove_message(Process *proc, word_t *&ip) { // opcode: 21
//  }
//  inline void opcode_timeout(Process *proc, word_t *&ip) { // opcode: 22
//  }
//  inline void opcode_loop_rec(Process *proc, word_t *&ip) { // opcode: 23
//  }
//  inline void opcode_loop_rec_end(Process *proc, word_t *&ip) { // opcode: 24
//  }
//  inline void opcode_wait(Process *proc, word_t *&ip) { // opcode: 25
//  }
//  inline void opcode_wait_timeout(Process *proc, word_t *&ip) { // opcode: 26
//  }
//  inline void opcode_m_plus(Process *proc, word_t *&ip) { // opcode: 27
//  }
//  inline void opcode_m_minus(Process *proc, word_t *&ip) { // opcode: 28
//  }
//  inline void opcode_m_times(Process *proc, word_t *&ip) { // opcode: 29
//  }
//  inline void opcode_m_div(Process *proc, word_t *&ip) { // opcode: 30
//  }
//  inline void opcode_int_div(Process *proc, word_t *&ip) { // opcode: 31
//  }
//  inline void opcode_int_rem(Process *proc, word_t *&ip) { // opcode: 32
//  }
//  inline void opcode_int_band(Process *proc, word_t *&ip) { // opcode: 33
//  }
//  inline void opcode_int_bor(Process *proc, word_t *&ip) { // opcode: 34
//  }
//  inline void opcode_int_bxor(Process *proc, word_t *&ip) { // opcode: 35
//  }
//  inline void opcode_int_bsl(Process *proc, word_t *&ip) { // opcode: 36
//  }
//  inline void opcode_int_bsr(Process *proc, word_t *&ip) { // opcode: 37
//  }
//  inline void opcode_int_bnot(Process *proc, word_t *&ip) { // opcode: 38
//  }
  inline void opcode_is_lt(Process *proc, word_t *&ip) { // opcode: 39
    Term on_fail = ip[0];
    Term arg1    = ip[1];
    Term arg2    = ip[2];
    IMMED(arg1); // in case they are reg references
    IMMED(arg2);
    if (Term::are_both_small(arg1, arg2)) {
      if (arg1.value() >= arg2.value()) {
        ip = proc->get_code_base() + (word_t)on_fail.small_get_value();
        return;
      }
    } else { // have to resolve referenced or boxed values
      if (!bif::is_term_smaller(arg1, arg2)) {
        ip = proc->get_code_base() + (word_t)on_fail.small_get_value();
        return;
      }
    }
    ip += 3; // args size
  }
//  inline void opcode_is_ge(Process *proc, word_t *&ip) { // opcode: 40
//  }
//  inline void opcode_is_eq(Process *proc, word_t *&ip) { // opcode: 41
//  }
//  inline void opcode_is_ne(Process *proc, word_t *&ip) { // opcode: 42
//  }
//  inline void opcode_is_eq_exact(Process *proc, word_t *&ip) { // opcode: 43
//  }
//  inline void opcode_is_ne_exact(Process *proc, word_t *&ip) { // opcode: 44
//  }
//  inline void opcode_is_integer(Process *proc, word_t *&ip) { // opcode: 45
//  }
//  inline void opcode_is_float(Process *proc, word_t *&ip) { // opcode: 46
//  }
//  inline void opcode_is_number(Process *proc, word_t *&ip) { // opcode: 47
//  }
//  inline void opcode_is_atom(Process *proc, word_t *&ip) { // opcode: 48
//  }
//  inline void opcode_is_pid(Process *proc, word_t *&ip) { // opcode: 49
//  }
//  inline void opcode_is_reference(Process *proc, word_t *&ip) { // opcode: 50
//  }
//  inline void opcode_is_port(Process *proc, word_t *&ip) { // opcode: 51
//  }
//  inline void opcode_is_nil(Process *proc, word_t *&ip) { // opcode: 52
//  }
//  inline void opcode_is_binary(Process *proc, word_t *&ip) { // opcode: 53
//  }
//  inline void opcode_is_constant(Process *proc, word_t *&ip) { // opcode: 54
//  }
//  inline void opcode_is_list(Process *proc, word_t *&ip) { // opcode: 55
//  }
//  inline void opcode_is_nonempty_list(Process *proc, word_t *&ip) { // opcode: 56
//  }
//  inline void opcode_is_tuple(Process *proc, word_t *&ip) { // opcode: 57
//  }
//  inline void opcode_test_arity(Process *proc, word_t *&ip) { // opcode: 58
//  }
//  inline void opcode_select_val(Process *proc, word_t *&ip) { // opcode: 59
//  }
//  inline void opcode_select_tuple_arity(Process *proc, word_t *&ip) { // opcode: 60
//  }
//  inline void opcode_jump(Process *proc, word_t *&ip) { // opcode: 61
//  }
//  inline void opcode_catch(Process *proc, word_t *&ip) { // opcode: 62
//  }
//  inline void opcode_catch_end(Process *proc, word_t *&ip) { // opcode: 63
//  }

inline void opcode_move(Process *proc, word_t *&ip) { // opcode: 64
  Term arg1 = Term(ip[0]);
  Term arg2 = Term(ip[1]);
  if (arg2.is_regx()) {
    proc->set_x(arg2.regx_get_value(), arg1);
  } else {
    G_FAIL("bad move dst")
  }
  ip += 2;
}
//  inline void opcode_get_list(Process *proc, word_t *&ip) { // opcode: 65
//  }
//  inline void opcode_get_tuple_element(Process *proc, word_t *&ip) { // opcode: 66
//  }
//  inline void opcode_set_tuple_element(Process *proc, word_t *&ip) { // opcode: 67
//  }
//  inline void opcode_put_string(Process *proc, word_t *&ip) { // opcode: 68
//  }
//  inline void opcode_put_list(Process *proc, word_t *&ip) { // opcode: 69
//  }
//  inline void opcode_put_tuple(Process *proc, word_t *&ip) { // opcode: 70
//  }
//  inline void opcode_put(Process *proc, word_t *&ip) { // opcode: 71
//  }
//  inline void opcode_badmatch(Process *proc, word_t *&ip) { // opcode: 72
//  }
//  inline void opcode_if_end(Process *proc, word_t *&ip) { // opcode: 73
//  }
//  inline void opcode_case_end(Process *proc, word_t *&ip) { // opcode: 74
//  }
//  inline void opcode_call_fun(Process *proc, word_t *&ip) { // opcode: 75
//  }
//  inline void opcode_make_fun(Process *proc, word_t *&ip) { // opcode: 76
//  }
//  inline void opcode_is_function(Process *proc, word_t *&ip) { // opcode: 77
//  }
//  inline void opcode_call_ext_only(Process *proc, word_t *&ip) { // opcode: 78
//  }
//  inline void opcode_bs_start_match(Process *proc, word_t *&ip) { // opcode: 79
//  }
//  inline void opcode_bs_get_integer(Process *proc, word_t *&ip) { // opcode: 80
//  }
//  inline void opcode_bs_get_float(Process *proc, word_t *&ip) { // opcode: 81
//  }
//  inline void opcode_bs_get_binary(Process *proc, word_t *&ip) { // opcode: 82
//  }
//  inline void opcode_bs_skip_bits(Process *proc, word_t *&ip) { // opcode: 83
//  }
//  inline void opcode_bs_test_tail(Process *proc, word_t *&ip) { // opcode: 84
//  }
//  inline void opcode_bs_save(Process *proc, word_t *&ip) { // opcode: 85
//  }
//  inline void opcode_bs_restore(Process *proc, word_t *&ip) { // opcode: 86
//  }
//  inline void opcode_bs_init(Process *proc, word_t *&ip) { // opcode: 87
//  }
//  inline void opcode_bs_final(Process *proc, word_t *&ip) { // opcode: 88
//  }
//  inline void opcode_bs_put_integer(Process *proc, word_t *&ip) { // opcode: 89
//  }
//  inline void opcode_bs_put_binary(Process *proc, word_t *&ip) { // opcode: 90
//  }
//  inline void opcode_bs_put_float(Process *proc, word_t *&ip) { // opcode: 91
//  }
//  inline void opcode_bs_put_string(Process *proc, word_t *&ip) { // opcode: 92
//  }
//  inline void opcode_bs_need_buf(Process *proc, word_t *&ip) { // opcode: 93
//  }
//  inline void opcode_fclearerror(Process *proc, word_t *&ip) { // opcode: 94
//  }
//  inline void opcode_fcheckerror(Process *proc, word_t *&ip) { // opcode: 95
//  }
//  inline void opcode_fmove(Process *proc, word_t *&ip) { // opcode: 96
//  }
//  inline void opcode_fconv(Process *proc, word_t *&ip) { // opcode: 97
//  }
//  inline void opcode_fadd(Process *proc, word_t *&ip) { // opcode: 98
//  }
//  inline void opcode_fsub(Process *proc, word_t *&ip) { // opcode: 99
//  }
//  inline void opcode_fmul(Process *proc, word_t *&ip) { // opcode: 100
//  }
//  inline void opcode_fdiv(Process *proc, word_t *&ip) { // opcode: 101
//  }
//  inline void opcode_fnegate(Process *proc, word_t *&ip) { // opcode: 102
//  }
//  inline void opcode_make_fun2(Process *proc, word_t *&ip) { // opcode: 103
//  }
//  inline void opcode_try(Process *proc, word_t *&ip) { // opcode: 104
//  }
//  inline void opcode_try_end(Process *proc, word_t *&ip) { // opcode: 105
//  }
//  inline void opcode_try_case(Process *proc, word_t *&ip) { // opcode: 106
//  }
//  inline void opcode_try_case_end(Process *proc, word_t *&ip) { // opcode: 107
//  }
//  inline void opcode_raise(Process *proc, word_t *&ip) { // opcode: 108
//  }
//  inline void opcode_bs_init2(Process *proc, word_t *&ip) { // opcode: 109
//  }
//  inline void opcode_bs_bits_to_bytes(Process *proc, word_t *&ip) { // opcode: 110
//  }
//  inline void opcode_bs_add(Process *proc, word_t *&ip) { // opcode: 111
//  }
//  inline void opcode_apply(Process *proc, word_t *&ip) { // opcode: 112
//  }
//  inline void opcode_apply_last(Process *proc, word_t *&ip) { // opcode: 113
//  }
//  inline void opcode_is_boolean(Process *proc, word_t *&ip) { // opcode: 114
//  }
//  inline void opcode_is_function2(Process *proc, word_t *&ip) { // opcode: 115
//  }
//  inline void opcode_bs_start_match2(Process *proc, word_t *&ip) { // opcode: 116
//  }
//  inline void opcode_bs_get_integer2(Process *proc, word_t *&ip) { // opcode: 117
//  }
//  inline void opcode_bs_get_float2(Process *proc, word_t *&ip) { // opcode: 118
//  }
//  inline void opcode_bs_get_binary2(Process *proc, word_t *&ip) { // opcode: 119
//  }
//  inline void opcode_bs_skip_bits2(Process *proc, word_t *&ip) { // opcode: 120
//  }
//  inline void opcode_bs_test_tail2(Process *proc, word_t *&ip) { // opcode: 121
//  }
//  inline void opcode_bs_save2(Process *proc, word_t *&ip) { // opcode: 122
//  }
//  inline void opcode_bs_restore2(Process *proc, word_t *&ip) { // opcode: 123
//  }
//  inline void opcode_gc_bif1(Process *proc, word_t *&ip) { // opcode: 124
//  }
//  inline void opcode_gc_bif2(Process *proc, word_t *&ip) { // opcode: 125
//  }
//  inline void opcode_bs_final2(Process *proc, word_t *&ip) { // opcode: 126
//  }
//  inline void opcode_bs_bits_to_bytes2(Process *proc, word_t *&ip) { // opcode: 127
//  }
//  inline void opcode_put_literal(Process *proc, word_t *&ip) { // opcode: 128
//  }
//  inline void opcode_is_bitstr(Process *proc, word_t *&ip) { // opcode: 129
//  }
//  inline void opcode_bs_context_to_binary(Process *proc, word_t *&ip) { // opcode: 130
//  }
//  inline void opcode_bs_test_unit(Process *proc, word_t *&ip) { // opcode: 131
//  }
//  inline void opcode_bs_match_string(Process *proc, word_t *&ip) { // opcode: 132
//  }
//  inline void opcode_bs_init_writable(Process *proc, word_t *&ip) { // opcode: 133
//  }
//  inline void opcode_bs_append(Process *proc, word_t *&ip) { // opcode: 134
//  }
//  inline void opcode_bs_private_append(Process *proc, word_t *&ip) { // opcode: 135
//  }
//  inline void opcode_trim(Process *proc, word_t *&ip) { // opcode: 136
//  }
//  inline void opcode_bs_init_bits(Process *proc, word_t *&ip) { // opcode: 137
//  }
//  inline void opcode_bs_get_utf8(Process *proc, word_t *&ip) { // opcode: 138
//  }
//  inline void opcode_bs_skip_utf8(Process *proc, word_t *&ip) { // opcode: 139
//  }
//  inline void opcode_bs_get_utf16(Process *proc, word_t *&ip) { // opcode: 140
//  }
//  inline void opcode_bs_skip_utf16(Process *proc, word_t *&ip) { // opcode: 141
//  }
//  inline void opcode_bs_get_utf32(Process *proc, word_t *&ip) { // opcode: 142
//  }
//  inline void opcode_bs_skip_utf32(Process *proc, word_t *&ip) { // opcode: 143
//  }
//  inline void opcode_bs_utf8_size(Process *proc, word_t *&ip) { // opcode: 144
//  }
//  inline void opcode_bs_put_utf8(Process *proc, word_t *&ip) { // opcode: 145
//  }
//  inline void opcode_bs_utf16_size(Process *proc, word_t *&ip) { // opcode: 146
//  }
//  inline void opcode_bs_put_utf16(Process *proc, word_t *&ip) { // opcode: 147
//  }
//  inline void opcode_bs_put_utf32(Process *proc, word_t *&ip) { // opcode: 148
//  }
//  inline void opcode_on_load(Process *proc, word_t *&ip) { // opcode: 149
//  }
//  inline void opcode_recv_mark(Process *proc, word_t *&ip) { // opcode: 150
//  }
//  inline void opcode_recv_set(Process *proc, word_t *&ip) { // opcode: 151
//  }
//  inline void opcode_gc_bif3(Process *proc, word_t *&ip) { // opcode: 152
//  }
//  inline void opcode_line(Process *proc, word_t *&ip) { // opcode: 153
//  }
//  inline void opcode_put_map_assoc(Process *proc, word_t *&ip) { // opcode: 154
//  }
//  inline void opcode_put_map_exact(Process *proc, word_t *&ip) { // opcode: 155
//  }
//  inline void opcode_is_map(Process *proc, word_t *&ip) { // opcode: 156
//  }
//  inline void opcode_has_map_fields(Process *proc, word_t *&ip) { // opcode: 157
//  }
//  inline void opcode_get_map_elements(Process *proc, word_t *&ip) { // opcode: 158
//  }

} // ns impl
} // ns gluon

